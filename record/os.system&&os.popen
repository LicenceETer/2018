os.system 调用系统命令，完成后退出，返回结果是命令执行状态，一般是0

os.popen 可以实现一个“管道”，从这个命令获取的值可以在python 中继续被使用

os.popen使用语法如下：

os.popen('CMD').readlines()[0]




最近有个需求就是页面上执行shell命令，第一想到的就是os.system，

复制代码代码如下:

os.system('cat /proc/cpuinfo')

但是发现页面上打印的命令执行结果 0或者1，当然不满足需求了。



尝试第二种方案 os.popen()

复制代码代码如下:

output = os.popen('cat /proc/cpuinfo')
print output.read()

通过 os.popen() 返回的是 file read 的对象，对其进行读取 read() 的操作可以看到执行的输出。但是无法读取程序执行的返回值）



尝试第三种方案 commands.getstatusoutput() 一个方法就可以获得到返回值和输出，非常好用。

复制代码代码如下:

(status, output) = commands.getstatusoutput('cat /proc/cpuinfo')
print status, output

Python Document 中给的一个例子，

复制代码代码如下:

>>> import commands
>>> commands.getstatusoutput('ls /bin/ls')
(0, '/bin/ls')
>>> commands.getstatusoutput('cat /bin/junk')
(256, 'cat: /bin/junk: No such file or directory')
>>> commands.getstatusoutput('/bin/junk')
(256, 'sh: /bin/junk: not found')
>>> commands.getoutput('ls /bin/ls')
'/bin/ls'
>>> commands.getstatus('/bin/ls')
'-rwxr-xr-x 1 root 13352 Oct 14 1994 /bin/ls'
